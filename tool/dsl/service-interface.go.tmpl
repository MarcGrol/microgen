package {{.Service.NameToLower}}

// Generated automatically by microgen: do not edit manually

import (
    "fmt"
    {{if .Service.HasDateField}}"time"{{end}}
    "{{.Application.Package}}/{{.Application.NameToFirstLower}}/events"
    "{{.Application.Package}}/lib/envelope"
)

// commands

{{range .Service.Commands}}
  {{if not .IsQuery}} 
	type {{.NameToFirstUpper}}Command struct {
	{{range .Input.Attributes}} {{.NameToFirstUpper}} {{.MultiplicityName}} {{.TypeName}} `json:"{{.Name}}" {{ if .IsMandatory }}binding:"required"{{end}}`
	{{end}}
	}

  {{end}}
{{end}}

type CommandHandler interface {
    Start( listenPort int) error
    {{range .Service.Commands}}
    	{{if .IsQuery}} Handle{{.NameToFirstUpper}}Query ( {{range .Input.Attributes}} {{.NameToFirstLower}} {{.TypeName}}, {{end}} ) ({{.OutputName}}, error)
    	{{else}} Handle{{.NameToFirstUpper}}Command ( command *{{.NameToFirstUpper}}Command ) error
    	{{end}}
    {{end}}
}

// events

type EventHandler interface {
    Start() error
    {{if .Service.ConsumesEvents}}OnEvent( envelop *envelope.Envelope) error
    {{end}}
}

type AggregateRoot interface {
    {{range .Service.GetAllEvents}} Apply{{.NameToFirstUpper}} ( event *events.{{.NameToFirstUpper}} )
    {{end}}
}

func applyEvents(envelopes []envelope.Envelope, aggregateRoot AggregateRoot) error {
    for _, envelop := range envelopes {
        switch( envelop.EventTypeName ) {
            {{range .Service.GetAllEvents}}case "{{.NameToFirstUpper}}":
                aggregateRoot.Apply{{.NameToFirstUpper}}(events.UnWrap{{.NameToFirstUpper}}(&envelop))
                break
            {{end}}
            default:
            return fmt.Errorf("applyEvents: Unexpected event %s", envelop.EventTypeName)
        }
    }
    return nil
}

