package events

// Generated automatically by microgen: do not edit manually

import (
    "time"
    "strconv"
    "encoding/json"
    "code.google.com/p/go-uuid/uuid"
    "github.com/MarcGrol/microgen/lib/envelope"
    "log"
)

type Type int
const (
   TypeUnknown Type = iota
{{range .GetUniqueEvents}} Type{{.NameToFirstUpper}} = {{.Id}}
{{end}}
)

func GetAllEventsTypes() []Type {
   return []Type {
    {{range .GetUniqueEvents}} Type{{.NameToFirstUpper}},
    {{end}}
    } 
}

func (t Type) String() string {
    switch( t ) {
    {{range .GetUniqueEvents}}case Type{{.NameToFirstUpper}}: return "{{.NameToFirstUpper}}"
    {{end}}
    }
    return "unknown"
}

{{range .GetUniqueEvents}}
type {{.NameToFirstUpper}} struct {
    {{range .Attributes}} {{.NameToFirstUpper}} {{.MultiplicityName}} {{.TypeName}} `json:"{{.Name}}"`
    {{end}}
}

func (event *{{.NameToFirstUpper}}) Wrap()  *envelope.Envelope {
    var err error
    var t Type = Type{{.NameToFirstUpper}}

    envelope := new(envelope.Envelope)
    envelope.Uuid = uuid.New()
    envelope.SequenceNumber = 0 // Set later by event-store
    envelope.Timestamp = time.Now()
    envelope.AggregateName = "{{.AggregateName}}"
	envelope.AggregateUid = {{if .HasAggregateFieldTypeInt }}strconv.Itoa(event.{{.AggregateFieldNameToFirstUpper}}){{else}}event.{{.AggregateFieldNameToFirstUpper}}
    {{end}}
    envelope.EventTypeName = t.String()
    blob, err := json.Marshal(event)
    if err != nil {
        log.Printf("Error marshalling event payload %+v", err)
        return nil //, err
    }
    envelope.EventData = string(blob)
    return envelope //, nil    
}

func Is{{.NameToFirstUpper}}(envelope *envelope.Envelope) bool {
    var t Type = Type{{.NameToFirstUpper}}
    return envelope.EventTypeName == t.String()
}

func GetIfIs{{.NameToFirstUpper}}(envelop *envelope.Envelope) (*{{.NameToFirstUpper}},bool) {
    if Is{{.NameToFirstUpper}}(envelop) == false {
        return nil, false
    }
    event :=  UnWrap{{.NameToFirstUpper}}(envelop)
    return event,true
}

func UnWrap{{.NameToFirstUpper}}(envelop *envelope.Envelope) *{{.NameToFirstUpper}} {
    if Is{{.NameToFirstUpper}}(envelop) == false {
        return nil
    }
    var event {{.NameToFirstUpper}}
    err := json.Unmarshal([]byte(envelop.EventData), &event)
    if err != nil {
        log.Printf("Error unmarshalling event payload %+v", err)
        return nil
    }

    return &event
}
{{end}}
