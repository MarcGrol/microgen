package events

// Generated automatically by microgen: do not edit manually

import (
    "time"
    "strconv"
    "code.google.com/p/go-uuid/uuid"
)

{{range .GetUniqueEvents}}
type {{.NameToFirstUpper}} struct {
    {{range .Attributes}} {{.NameToFirstUpper}} {{.MultiplicityName}} {{.TypeName}} `json:"{{.Name}}"`
    {{end}}
}

func (event *{{.NameToFirstUpper}}) Wrap() *Envelope {
    envelope := new(Envelope)
    envelope.Type = Type{{.NameToFirstUpper}}
    envelope.{{.NameToFirstUpper}} = event
    envelope.AggregateName = "{{.AggregateName}}"
	envelope.AggregateUid = {{if .HasAggregateFieldTypeInt }}strconv.Itoa(event.{{.AggregateFieldNameToFirstUpper}}){{else}}event.{{.AggregateFieldNameToFirstUpper}}{{end}}
    envelope.SequenceNumber = 0 // Set later by event-store
    envelope.Timestamp = time.Now()
    envelope.Uuid = uuid.New()
    return envelope
}
{{end}}

type Type int
const (
   TypeUnknown Type = iota
{{range .GetUniqueEvents}} Type{{.NameToFirstUpper}}
{{end}}
)

func (t Type) String() string {
	switch( t ) {
	{{range .GetUniqueEvents}}case Type{{.NameToFirstUpper}}: return "{{.NameToFirstUpper}}"
	{{end}}
	}
	return "unknown"
}

type Envelope struct {
    Uuid           string `json:"uuid"`
    SequenceNumber uint64 `json:"sequenceNumber"`
    AggregateName string `json:"aggregateName"`
    AggregateUid string `json:"aggregateUid"`
    Timestamp time.Time `json:"timestamp"`
    Type Type `json:"type"`
{{range .GetUniqueEvents}} {{.NameToFirstUpper}} *{{.NameToFirstUpper}} `json:"{{.NameToFirstLower}}"`
{{end}}
}

type EventHandlerFunc func( Envelope *Envelope ) error

type PublishSubscriber interface {
    Subscribe( eventType Type, callback EventHandlerFunc ) error
    Publish( envelope *Envelope ) error
}

type StoredItemHandlerFunc func( envelope *Envelope )

type Store interface {
    Store( envelope *Envelope ) error
    Iterate( callback StoredItemHandlerFunc ) error
    Get( aggregateName string, aggregateUid string ) ([]Envelope,error)
}
