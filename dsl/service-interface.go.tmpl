package {{.Service.NameToLower}}

// Generated automatically by microgen: do not edit manually

import (
    {{if .Service.HasDateField}}"time"{{end}}
    "{{.Application.Package}}/{{.Application.NameToFirstLower}}/events"
)

// commands

{{range .Service.Commands}}
  {{if not .IsQuery}} 
	type {{.NameToFirstUpper}}Command struct {
	{{range .Input.Attributes}} {{.NameToFirstUpper}} {{.MultiplicityName}} {{.TypeName}} `json:"{{.Name}}" {{ if .IsMandatory }}binding:"required"{{end}}`
	{{end}}
	}

    {{/*
    func (command {{.NameToFirstUpper}}Command) BasicValidate() error {
        {{range .Input.Attributes}}
        {{ if .IsInt}} // command.{{.NameToFirstUpper}} int {{end}}
        {{ if .IsString}} // command.{{.NameToFirstUpper}} string {{end}}
        {{ if .IsBoolean}} // command.{{.NameToFirstUpper}} bool {{end}}
        {{ if .IsTimestamp}} // command.{{.NameToFirstUpper}} time.Time {{end}}
        {{end}}
        return nil
    }
    */}}
  {{end}}
{{end}}

type CommandHandler interface {
    {{range .Service.Commands}}
    	{{if .IsQuery}} Handle{{.NameToFirstUpper}}Query ( {{range .Input.Attributes}} {{.NameToFirstLower}} {{.TypeName}}, {{end}} ) ({{.OutputName}}, error)
    	{{else}} Handle{{.NameToFirstUpper}}Command ( command {{.NameToFirstUpper}}Command ) error
    	{{end}}
    {{end}}
}

// events

type EventHandler interface {
    {{range .Service.GetConsumedEvents}} On{{.NameToFirstUpper}} ( event events.{{.NameToFirstUpper}} ) error
    {{end}}
}

type EventApplier interface {
    {{range .Service.GetAllEvents}} Apply{{.NameToFirstUpper}} ( event events.{{.NameToFirstUpper}} )
    {{end}}
}

